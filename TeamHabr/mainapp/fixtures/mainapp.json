[{"model": "mainapp.categorypost", "pk": 1, "fields": {"name": "Дизайн", "slug": "dizain", "description": "Дизайн", "is_active": true}}, {"model": "mainapp.categorypost", "pk": 2, "fields": {"name": "Мобильная разработка", "slug": "mobile-razrabotka", "description": "Мобильная разработка", "is_active": true}}, {"model": "mainapp.categorypost", "pk": 4, "fields": {"name": "Маркетинг", "slug": "marketing", "description": "Маркетинг", "is_active": true}}, {"model": "mainapp.categorypost", "pk": 5, "fields": {"name": "Веб-разработка", "slug": "veb-razrabotka", "description": "Веб-разработка", "is_active": true}}, {"model": "mainapp.post", "pk": 1, "fields": {"category_id": 1, "user_id": 3, "title": "О пользе дизайна в условиях боевых дейтствий", "slug": "o-polze-dizaina-v-usloviiakh-boevykh-deitstvii", "text": "Дизайн - дело тонкое", "post_status": "Apr", "status_update": "2021-01-29T18:42:05Z", "date_create": "2021-01-29T18:42:05Z", "date_update": "2021-01-29T18:42:05Z"}}, {"model": "mainapp.post", "pk": 2, "fields": {"category_id": 4, "user_id": 2, "title": "Планы", "slug": "plany", "text": "Таким образом реализация намеченных плановых заданий позволяет оценить значение новых предложений. Значимость этих проблем настолько очевидна, что консультация с широким активом играет важную роль в формировании новых предложений. Равным образом рамки и место обучения кадров влечет за собой процесс внедрения и модернизации системы обучения кадров, соответствует насущным потребностям.\r\nРавным образом консультация с широким активом требуют определения и уточнения модели развития. Равным образом рамки и место обучения кадров влечет за собой процесс внедрения и модернизации системы обучения кадров, соответствует насущным потребностям.\r\nИдейные соображения высшего порядка, а также начало повседневной работы по формированию позиции позволяет оценить значение модели развития. С другой стороны рамки и место обучения кадров способствует подготовки и реализации модели развития.", "post_status": "Apr", "status_update": "2021-02-26T02:12:46.469Z", "date_create": "2021-01-29T18:43:11Z", "date_update": "2021-01-29T18:43:11Z"}}, {"model": "mainapp.post", "pk": 3, "fields": {"category_id": 4, "user_id": 1, "title": "Интересная история", "slug": "interesnaia-istoriia", "text": "Рыба карась в веб-дизайне — временное наполнение макета страницы для имитации её законченного вида. У дизайнера не всегда есть под рукой материалы, которые планируется публиковать на веб-сайте и поэтому нужно использовать что-то иное чтобы показать как дизайн будет работать в естественных условиях. При этом рыбное содержимое не обязано обладать смыслом — здесь важно визуальное восприятие. Рыбным содержимым может быть не только текст, но и изображения (например, иллюстрации к статье, аватары пользователей, кадры из видео для видеоплеера, баннеры и т. д.). Дизайнер рыбу может придумать самостоятельно, а может скопировать с другого аналогичного сайта. В случае с текстом можно воспользоваться программой-бредогенератором или же вставить классический рыбный текст «Lorem ipsum».\r\n\r\nДля того, чтобы создать современный удобный веб-сайт сегодня совершенно не обязательно обладать навыками профессионального дизайнера-верстальщика. Больше не нужно месяцами изучать алгоритмы php и разбираться в хитросплетениях css разметки. Достаточно просто выбрать понравившийся премиум-шаблон и на его основе создать собственный готовый сайт. На рынке существует множество CMS (систем управление сайтом), но одним из наиболее практичных и универсальных решений это WordPress. Он отлично подходит и для небольших сайтов-визиток, Landing page и для современных интернет-магазинов, а также больше корпоративных бизнес-порталов. Обладая большой универсальностью и практичностью, он также предлагает пользователю огромное количество уже готовых решений, с помощью которых можно получить готовый сайт в течение всего пары часов. Мы говорим о шаблонах.", "post_status": "Apr", "status_update": "2021-02-26T17:23:27.324Z", "date_create": "2021-01-29T18:43:54Z", "date_update": "2021-02-18T12:56:53.899Z"}}, {"model": "mainapp.post", "pk": 4, "fields": {"category_id": 2, "user_id": 2, "title": "Товарищи", "slug": "tovarishchi", "text": "Товарищи! консультация с широким активом позволяет выполнять важные задания по разработке систем массового участия. Идейные соображения высшего порядка, а также дальнейшее развитие различных форм деятельности позволяет оценить значение новых предложений.\r\nТоварищи! консультация с широким активом позволяет выполнять важные задания по разработке систем массового участия. Таким образом реализация намеченных плановых заданий позволяет оценить значение новых предложений.\r\nПовседневная практика показывает, что реализация намеченных плановых заданий в значительной степени обуславливает создание модели развития. Равным образом консультация с широким активом требуют определения и уточнения модели развития. С другой стороны рамки и место обучения кадров способствует подготовки и реализации модели развития.", "post_status": "Apr", "status_update": "2021-01-29T18:44:34Z", "date_create": "2021-01-29T18:44:34Z", "date_update": "2021-01-29T18:44:34Z"}}, {"model": "mainapp.post", "pk": 5, "fields": {"category_id": 5, "user_id": 3, "title": "Маркетинг в применении к пожарному делу", "slug": "marketing-v-primenenii-k-pozharnomu-delu", "text": "Пожарное дело традиционно использует проверенные способы маркетига. Для продвижения услуг пожарных на современном рынке...", "post_status": "Apr", "status_update": "2021-01-29T18:51:31Z", "date_create": "2021-01-29T18:51:31Z", "date_update": "2021-01-29T18:51:31Z"}}, {"model": "mainapp.post", "pk": 6, "fields": {"category_id": 1, "user_id": 3, "title": "Применение слагов", "slug": "primenenie-slagov", "text": "Слаг – не такой популярный и востребованный у наших российских рыболовов тип силиконовых приманок, как, например твистер или виброхвост. Как и всевозможная креатура – резина непонятных форм и размеров, с лапками и щупальцами – слаги применяются гораздо реже, да и то в качестве эксперимента. Но для меня они уже на протяжении нескольких лет во многих ситуациях служат «палочкой-выручалочкой»!", "post_status": "Apr", "status_update": "2021-02-09T16:09:12.317Z", "date_create": "2021-01-30T02:24:05Z", "date_update": "2021-02-09T16:08:35.768Z"}}, {"model": "mainapp.post", "pk": 7, "fields": {"category_id": 5, "user_id": 3, "title": "Этюд из истории веб-разработки", "slug": "fgsg", "text": "В период 1890-1970 вся обработка больших данных осуществлялась через перфокарты. Перфокарты в свою очередь обрабатывались при помощи т.н. «регистрирующей аппаратурой», центральным звеном которой был электромеханический «сортировщик перфокарт». Перфокарты и сопутствующую аппаратуру применяли для решения самых разнообразных задач: перепись населения, бухгалтерский учёт, инвентаризация, расчёт заработной платы и т.д.\r\n\r\n\r\nКак люди работали с перфокартами? Какому алгоритму следовал электромеханический сортировщик перфокарт? Как осуществлялась сортировка по числовым полям данных? А по строковым? Обо всём этом – ниже.!", "post_status": "Apr", "status_update": "2021-01-30T10:09:08Z", "date_create": "2021-01-30T10:09:08Z", "date_update": "2021-02-07T18:28:28.996Z"}}, {"model": "mainapp.post", "pk": 8, "fields": {"category_id": 2, "user_id": 3, "title": "Что лучше в мобильной разработке: кабачки или баклажаны?", "slug": "chto-luchshe-v-mobilnoi-razrabotke-kabachki-ili-baklazhany", "text": "Кабачок является прямым родственником тыквы, а именно ее разновидностью. Может быть желтого, зеленого, белого цвета и имеет нежную мякоть. Хоть кабачок и не обладает ярким вкусом, но не стоит исключать его из рациона, ведь он довольно таки полезен.\r\n\r\nСезон\r\nКабачковый сезон открывается в июне и продолжается до конца сентября. Именно в этот период вы сможете купить хороший грунтовой кабачок.\r\n\r\nВ супермаркетах кабачки доступны круглый год, но эти кабачки выращены в теплицах.\r\n\r\nКак выбирать\r\nКожица кабачка должна быть тонкой, гладкой и без повреждений. Выбирайте небольшие плоды 12-20 см и массой 100-200 гр. Храните в холодильнике, предварительно не мойте, иначе нанесете повреждения на кожицу, что приведет к быстрой порче овоща.\r\n\r\nЧем полезны кабачки\r\nДля пищеварения и обмена веществ\r\n\r\nКабачки идеально подходят для диетического питания людей, склонных к полноте или желающих похудеть, поскольку калорийность кабачков составляет всего 20-30 килокалорий на 100 грамм этого овоща. Блюда из кабачка помогут улучшить перистальтику кишечника и поспособствуют выведению желчи.\r\n\r\nВ кабачке не содержится грубых волокон и блюда из них мягкие и нежные, в них много пектина, который способствует легкому усвоению пищи. А поскольку в кабачке большое содержание воды, кабачок отлично помогает вывести из организма излишки солей и нормализует водно-солевой баланс.\r\n\r\nДля иммунитета.\r\n\r\nХоть по вкусу кабачок совсем и не кислый, но в нем присутствует большое количество витамина С, а также В-каротина, которые способствуют укреплению иммунитета.\r\n\r\nДля молодости и красоты\r\n\r\nВ кабачках присутствуют витамины групп А, В, С, Н, PP и знаменитый витамин молодости – Е (токоферол) – природный антиоксидант, помогающий организму бороться со свободными радикалами и замедлять старение.\r\n\r\nДля кровеносной системы\r\n\r\nМинеральный состав кабачка очень богат, здесь есть калий, натрий, магний, фосфор и железо. Это обозначает, что они очень полезны для людей, страдающих гипертонией и сердечно-сосудистыми заболеваниями. А из-за содержания железа и витамина С кабачки необходимы в рационе людей, страдающих анемией.\r\n\r\nКабачки показаны к употреблению людям страдающим сахарным диабетом. Кроме того, кабачки не только не вызывают аллергии, но и сами обладают противоаллергенным действием.\r\n\r\nЯ очень люблю кабачки!!!?\r\nНо баклажаны - лучше", "post_status": "Apr", "status_update": "2021-02-10T03:04:56.643Z", "date_create": "2021-01-31T22:08:57Z", "date_update": "2021-02-10T03:02:50.762Z"}}, {"model": "mainapp.post", "pk": 9, "fields": {"category_id": 1, "user_id": 3, "title": "Маркетинговые ухищрения Ростовских мошенников", "slug": "marketingovye-ukhishchreniia-rostovskikh-moshennikov", "text": "50 тысяч рублей лишились двое жителей Энгельса из-за телефонных мошенников. Как сообщает пресс-служба ГУ МВД по Саратовской области, 59-летняя женщина поговорила с позвонившим ей \"сотрудником банка\", сообщившим, что ее личный кабинет взломали. Он предложил перевести деньги на временные счета и по смс назвал ей 14 номеров счетов, на которые она и перевела средства.\r\n\r\nДругую схему применили и к 40-летней жительнице Энгельса. \"Сотрудник банка\" во избежание взлома ее личного кабинета попросил продиктовать ему все данные ее банковской карты, включая пароль, и прислал проверочные коды по смс. Доверившаяся ему женщина лишилась 170 тысяч рублей.\r\n\r\nЕще не известно, кто тут больше виноват!\r\nДумаю, виноват Кролик Роджер!!!\r\nНо этого никому не доказать!\r\nПРи редактировании статьи она отправляется на одобрение модератору", "post_status": "Apr", "status_update": "2021-02-10T03:09:06.991Z", "date_create": "2021-02-03T04:07:21.295Z", "date_update": "2021-02-10T03:08:42.003Z"}}, {"model": "mainapp.post", "pk": 10, "fields": {"category_id": 2, "user_id": 5, "title": "Студия Web-Boss", "slug": "studiia-web-boss", "text": "Разнообразный и богатый опыт консультация с широким активом обеспечивает широкому кругу. С другой стороны рамки и место обучения кадров способствует подготовки и реализации модели развития. С другой стороны укрепление и развитие структуры обеспечивает участие в формировании систем массового участия.\r\nЗначимость этих проблем настолько очевидна, что дальнейшее развитие различных форм деятельности обеспечивает широкому кругу (специалистов) участие в формировании новых предложений. Если у вас есть какие то интересные предложения, обращайтесь! Студия Web-Boss всегда готова решить любую задачу.\r\nС другой стороны постоянное информационно-пропагандистское обеспечение нашей деятельности обеспечивает широкому кругу (специалистов) участие в формировании позиций, занимаемых участниками в отношении поставленных задач. Идейные соображения высшего порядка, а также дальнейшее развитие различных форм деятельности позволяет оценить значение новых предложений.\r\nТаким образом новая модель организационной деятельности способствует подготовки и реализации систем массового участия. С другой стороны постоянное информационно-пропагандистское обеспечение нашей деятельности обеспечивает широкому кругу (специалистов) участие в формировании позиций, занимаемых участниками в отношении поставленных задач.", "post_status": "Apr", "status_update": "2021-02-12T02:04:10.907Z", "date_create": "2021-02-04T16:34:06.773Z", "date_update": "2021-02-11T16:35:52.519Z"}}, {"model": "mainapp.post", "pk": 12, "fields": {"category_id": 5, "user_id": 2, "title": "Товарищи2", "slug": "tovarishchi2", "text": "ТоварищиТоварищиТоварищиТоварищиТоварищиТоварищиТоварищиТоварищиТоварищиТоварищиТоварищиТоварищиТоварищиТоварищиТоварищи\r\nУраУраУраУраУраУраУраУраУраУраУраУраУраУраУраУраУраУраУраУраУраУраУраУраУраУраУраУраУраУраУраУраУраУраУраУраУраУраУраУраУраУраУраУра", "post_status": "Apr", "status_update": "2021-02-26T17:23:33.809Z", "date_create": "2021-02-05T18:28:01.358Z", "date_update": "2021-02-05T18:28:01.358Z"}}, {"model": "mainapp.post", "pk": 13, "fields": {"category_id": 4, "user_id": 12, "title": "как купить кота", "slug": "kak-kupit-kota", "text": "чтобы купить кота, для начала надо сначала захотеть купить какого нибудь кота. а потом уже выбирать параметры: окрас, породу и возраст. А уже затем пойти на улицу найти кота бесплатно и порадоваться сэконоиленым сбережениям, на которые можно купить биткоинов", "post_status": "Apr", "status_update": "2021-02-09T15:06:24.369Z", "date_create": "2021-02-07T22:14:05.357Z", "date_update": "2021-02-09T15:05:31.643Z"}}, {"model": "mainapp.post", "pk": 14, "fields": {"category_id": 1, "user_id": 1, "title": "Каково это — писать статьи", "slug": "kakovo-eto-pisat-stati", "text": "Совсем недавно я опубликовал свою первую статью на Хабрахабр, тем самым поменяв свой статус с молчуна на хаброписарь. Для меня лично решение писать далось не просто. Что подтолкнуло и чего это стоило я расскажу в этой статье, пока в памяти все свежо. Кому интересно, добро пожаловать под кат.\r\n\r\nДля кого это статья?\r\n\r\nВ первую очередь это статья для тех читателей, которым есть что поведать нашему сообществу, но которые никак не могут сделать первый шаг. Я попробую рассказать коротко, что испытал, что получил и ответить на вопрос — 'Не зря ли все это'? А каждый из Вас, молчунов, решит сам, стоит оно того или нет. Если же в Вашем списке десятки статей, здесь Вы сможете просто вспомнить чувства о своей первой…\r\n\r\nСтрахи и неуверенность\r\n\r\nМеня давно терзали сомненья по поводу писать или нет. Поэтому однажды я спросил сам себя: А что собственно мешает? Я достаточно взрослый человек, чтобы честно и самокритично ответить на этот вопрос. Оказались — страх перед публикой, с одной стороны и неуверенность, а нужно ли это кому-то еще — с другой. Стыдно признаться, но чтобы преодолеть 2 этих состояния мне потребовалось 3 года. Не то, чтобы я каждый день думал на протяжении этого времени, просто с момента первой мысли об этом и делом прошло столько времени. И я рад, что смог преодолеть себя. Здесь тяжело дать уместный совет сомневающимся, кроме как — сделайте первый шаг. Смею предположить, что некторые авторы вообще не видят в вышеизложенном проблему, подумаешь, статью написать — тоже мол, подвиг. Но поверьте мне, это все слишком индивидуально и для некоторых выйти из зоны комфорта и немного рискнуть — та еще задачка.\r\n\r\nПотом и кровью\r\n\r\nКонечно, статья статье рознь. Есть совсем простые, как эта, а есть такие, по которым смело можно писать диссертацию, пример здесь. Но одно точно верно: статья — это труд. Из моего опыта было так — одну написал за 4 часа про собеседование за присест. А другая, небольшая, родилась, благодаря 2 летней разработки, за время которой, было прочитано 2 талмуда по 600 листов каждый, некоторые главы которых перечитывались по 20 раз, изучено более 3 проектов на гитхабе, написано более 1000 java классов. Конечно, все это делалось не ради статьи, но они рождаются благодаря такому труду. Да, первый шаг — это не легко, но если Вам есть что сказать — скажите. Как минимум, логи сервера Вас точно не забудут :)\r\n\r\nЭмоции и особое состояние\r\n\r\nЭмоции — это то, что ты получаешь, в не зависимости, хочешь ты этого или нет. И это не просто эмоции. Я не испытывал такого никогда: с одной стороны, тазик над головой со зловонной жидкостью так и плещется, опрокидываясь на тебя иногда после 'доброго' комментария и сразу же наполняясь опять, ожидая своей минуты. С другой — это гормоны радости, которые начинают быстро выделяться, когда звездочки и лайки растут и ты понимаешь, что кому-то твой труд пришелся по вкусу. Так вот, состояние в котором ты находишься после первой статьи — это термоядерная смесь положительного и отрицательного, которая уживается в тебе одновременно. Я не любитель такого каламбура эмоций, но точно знаю, что многим эти состояния просто необходимы, как воздух. Кому-то полезно встряхнуться и посмотреть на некоторые вещи другими глазами. Но во всех случаях, надо быть психологически готовым к совершенно неожиданному развитию событий.\r\n\r\nКомментарии\r\n\r\nПосле написанной статьи, тебя ждет непредсказуемое путешествия в умы читателей. И это путешествие начинается после первого комментария. Но приготовся, в них ты найдешь вообще все — по теме и в оффтоп, похвалу и хулу, гнев и радость и многое другое. Но я хотел бы остановиться на особых комментариях, от внимательных читателей и очень умных людей. Попадается такой, с вопросом, что, чтобы ответить на него, тебе приходиться познать большее, чем ты познал за последние 3 месяца, за ооооочень короткий строк. Ты начинаешь уважать сам себя, что смог так быстро разобраться и ответить, но а если ошибся, вежливые люди тебе укажут на это. Если честно, то про комментарии и их содержательную часть можно написать не одну статью, только дайте волю фантазии.\r\n\r\nОни где-то рядом\r\n\r\nОни — это люди, с которыми ты работаешь каждый день, у которых огромный бэкграунд, но которые по непонятным причинам молчат. Им есть что сказать, но они молчат. Что же не так? Я, например, знаю одного, который мог бы поведать о том, как ему удалось написать трансформер и транслятор кодовой базы приложения, написанного на Java(UI на Swing, логика на LISP) в приложение под Браузер (HTML5, CSS и JavaScript). Общий объемом исходников более 1000000 строк кода! У другого — жизненная история того, какое он получил на собеседовании в 2002 году задание — написать мини СУБД для JAVA приложения. И знаете что? Эта мини СУБД работает до сих пор уже 15 лет. Есть еще и тот, который молчит о доработках в Proguard для обфускации JavaScript, работающего под Rhino/Nashorn. И многие другие.\r\n\r\nПожелания\r\n\r\nПопробуйте один раз. Возьмите перо, чернила и белый пергамент. Напишите то, чем так давно хотели поделиться. И получите в ответ благодарность, новый круг людей, новые знания, букет эмоций и самоуважение.\r\n\r\nВсем удачи и новых статей.", "post_status": "Del", "status_update": "2021-02-12T02:04:02.704Z", "date_create": "2021-02-08T09:18:43.262Z", "date_update": "2021-02-09T10:22:51.238Z"}}, {"model": "mainapp.post", "pk": 18, "fields": {"category_id": 5, "user_id": 3, "title": "Как купить кота", "slug": "lkak-kupit-kota", "text": "1", "post_status": "Apr", "status_update": "2021-02-17T18:34:44.529Z", "date_create": "2021-02-10T02:50:26.499Z", "date_update": "2021-02-11T03:50:18.372Z"}}, {"model": "mainapp.post", "pk": 22, "fields": {"category_id": 5, "user_id": 3, "title": "тестируем одинаковые слаги", "slug": "22_testiruem-odinakovye-slagi", "text": "тестируем одинаковые слаги - 2\r\nОслаг - это лагерь особого назначения", "post_status": "Apr", "status_update": "2021-02-26T17:23:40.715Z", "date_create": "2021-02-10T02:52:47.029Z", "date_update": "2021-02-10T03:06:42.345Z"}}, {"model": "mainapp.post", "pk": 23, "fields": {"category_id": 5, "user_id": 3, "title": "тестируем одинаковые слаги", "slug": "23_testiruem-odinakovye-slagi", "text": "тестируем одинаковые слаги - 3", "post_status": "Del", "status_update": "2021-02-10T03:28:32.629Z", "date_create": "2021-02-10T02:56:32.033Z", "date_update": "2021-02-10T02:57:08.172Z"}}, {"model": "mainapp.post", "pk": 25, "fields": {"category_id": 5, "user_id": 3, "title": "тестируем одинаковые слаги", "slug": "none-testiruem-odinakovye-slagi", "text": "И снова о слагах..\r\nХочу крепкого чая с лимоном.\r\nНа улице -29!", "post_status": "Apr", "status_update": "2021-02-26T17:23:52.403Z", "date_create": "2021-02-10T03:29:36.070Z", "date_update": "2021-02-10T03:29:36.070Z"}}, {"model": "mainapp.post", "pk": 34, "fields": {"category_id": 5, "user_id": 14, "title": "как купить кота", "slug": "gkak-kupit-kota", "text": "Прежде всего нужно определиться для чего Вы покупаете котенка, хотите ли Вы получить просто домашнего любимца или строите планы о звездной карьере своего будущего питомца, желая выступать и выигрывать конкурсы на профессиональных выставках, а может быть Вы хотите заняться разведением?\r\n\r\nЕсли Вы хотите приобрести породистую кошку, тогда прежде всего нужно выбрать ту самую породу, которая нравится Вам больше всего. Различные породы кошек отличают этих животных не только по их внешнему виду, но даже и особенностями их характеров и темпераментов. Есть также отличия в уходе и содержании разных пород.", "post_status": "Apr", "status_update": "2021-02-17T18:57:28.447Z", "date_create": "2021-02-11T03:47:21.065Z", "date_update": "2021-02-11T03:47:21.065Z"}}, {"model": "mainapp.post", "pk": 35, "fields": {"category_id": 5, "user_id": 3, "title": "Как купить кота", "slug": "zkak-kupit-kota", "text": "Кот - животное нервное. Его нужно покупать аккуратно!", "post_status": "Apr", "status_update": "2021-02-17T18:35:06.016Z", "date_create": "2021-02-12T17:44:48.838Z", "date_update": "2021-02-12T17:44:48.838Z"}}, {"model": "mainapp.post", "pk": 36, "fields": {"category_id": 5, "user_id": 18, "title": "етвами тп", "slug": "etvami-tp", "text": "фвповкщзитщжали", "post_status": "Apr", "status_update": "2021-02-13T10:19:19.333Z", "date_create": "2021-02-13T10:14:58.325Z", "date_update": "2021-02-13T10:14:58.325Z"}}, {"model": "mainapp.post", "pk": 37, "fields": {"category_id": 1, "user_id": 18, "title": "аьонелое", "slug": "aoneloe", "text": "аспоьне7ш ь7е кпрык5еи", "post_status": "Apr", "status_update": "2021-02-26T17:23:56.772Z", "date_create": "2021-02-13T10:15:41.134Z", "date_update": "2021-02-13T10:16:27.458Z"}}, {"model": "mainapp.post", "pk": 38, "fields": {"category_id": 4, "user_id": 20, "title": "Тестовая статья", "slug": "testovaia-statia", "text": "Тестовая статья\r\n1212у12у", "post_status": "Apr", "status_update": "2021-02-17T18:57:22.722Z", "date_create": "2021-02-13T17:17:05.126Z", "date_update": "2021-02-13T17:19:47.927Z"}}, {"model": "mainapp.post", "pk": 39, "fields": {"category_id": 1, "user_id": 19, "title": "о дизайне коротко", "slug": "o-dizaine-korotko", "text": "Дизайн (от англ. design — проектировать, чертить, задумать, а также проект, план, рисунок) — деятельность по проектированию эстетических свойств промышленных изделий («художественное конструирование»), а также результат этой деятельности (например, в таких словосочетаниях, как «дизайн автомобиля»).", "post_status": "Apr", "status_update": "2021-02-26T02:12:58.183Z", "date_create": "2021-02-14T19:44:27.915Z", "date_update": "2021-02-14T20:04:01.540Z"}}, {"model": "mainapp.post", "pk": 40, "fields": {"category_id": 4, "user_id": 25, "title": "К Керн*", "slug": "k-kern", "text": "Я помню чудное мгновенье:\r\nПередо мной явилась ты,\r\nКак мимолетное виденье,\r\nКак гений чистой красоты.\r\n\r\nВ томленьях грусти безнадежной,\r\nВ тревогах шумной суеты,\r\nЗвучал мне долго голос нежный\r\nИ снились милые черты.\r\n\r\nШли годы. Бурь порыв мятежный\r\nРассеял прежние мечты,\r\nИ я забыл твой голос нежный,\r\nТвои небесные черты.\r\n\r\nВ глуши, во мраке заточенья\r\nТянулись тихо дни мои\r\nБез божества, без вдохновенья,\r\nБез слез, без жизни, без любви.\r\n\r\nДуше настало пробужденье:\r\nИ вот опять явилась ты,\r\nКак мимолетное виденье,\r\nКак гений чистой красоты.\r\n\r\nИ сердце бьется в упоенье,\r\nИ для него воскресли вновь\r\nИ божество, и вдохновенье,\r\nИ жизнь, и слезы, и любовь.", "post_status": "Apr", "status_update": "2021-02-15T15:04:11.627Z", "date_create": "2021-02-15T03:42:39.055Z", "date_update": "2021-02-15T03:42:39.055Z"}}, {"model": "mainapp.post", "pk": 41, "fields": {"category_id": 1, "user_id": 1, "title": "Спецстраницы", "slug": "spetsstranitsy", "text": "Специальные страницы — инструменты движка MediaWiki, располагающиеся в условном пространстве «Служебная:» (англ. Special:). Почти все они перечислены на странице «Служебные страницы», доступной по ссылке слева.\r\n\r\nСпецстраницы можно условно разделить на следующие группы.\r\n\r\nДинамические списки\r\nС формой ввода для фильтрации по некоторым параметрам.\r\n\r\nСтраницы:\r\n\r\nВсе страницы (Allpages) и Указатель по началу названий страниц (Prefixindex): страницы определённого пространства имён. Если указать начало слова, то обе спецстраницы покажут страницы с названиями, начинающимися с этих букв, но затем «Все страницы» продолжит список всеми последующими в алфавитном порядке страницами.\r\nЗащищённые страницы (ProtectedPages) и Защищённые названия (ProtectedTitles)\r\nКатегории (Categories) и Дерево категорий (CategoryTree) (использующее mw:Extension:CategoryTree)\r\nГалерея новых файлов (NewFiles) и Список файлов (ListFiles) (сортируется по дате, имени или размеру)\r\nУчастники:\r\n\r\nСписок участников (Listusers)\r\nСписок заблокированных IP-адресов и участников (Ipblocklist)\r\nПравки:\r\n\r\nВклад (Contributions) (также есть слева на страницах участников)\r\nЖурналы (Log)\r\nСвежие правки (Recentchanges)\r\nСвязанные правки (Recentchangeslinked): изменения только на определённых страницах (подробнее)\r\nНовые страницы (Newpages)\r\nИнструменты\r\n⧼filepath⧽ (Filepath)\r\nРазвёртка шаблонов (ExpandTemplates)\r\nИсточники книг (Booksources)\r\nЭкспорт страниц (Export)\r\nИнструменты поиска:\r\n\r\nПоиск (Search)\r\nПоиск внешних ссылок (Linksearch)\r\nПоиск по MIME (MIMEsearch)\r\nСлучайная страница/перенаправление в пространстве статей; про другие см. ниже\r\n\r\nСлучайная статья (Random)\r\nСлучайное перенаправление (Randomredirect)\r\nИнструменты, обычно используемые прямо из интерфейса сайта:\r\n\r\nСсылки сюда (Whatlinkshere), см. m:Помощь:Что ссылается сюда.\r\nЦитирование (Cite)\r\nЗагрузить файл (Upload): только участникам, зарегистрированным не менее 14 дней назад и совершившим не менее 20 правок.\r\nПроект\r\nВерсия (Version)\r\nСтатистика (Statistics)\r\nСлужебные страницы (Specialpages)\r\nСистемные сообщения (Allmessages) (большая страница) см. Википедия:Перевод интерфейса\r\nСписок проектов Викимедиа (SiteMatrix)\r\nУчётная запись\r\nДля регистрации:\r\n\r\n⧼userlogin⧽ (Userlogin)\r\nСоздать учётную запись (CreateAccount) (или Special:Userlogin/signup; этих ссылок нет в автоматическом списке)\r\nДля зарегистрированных:\r\n\r\nНастройки (Preferences)\r\nСписок наблюдения (Watchlist), см. m:Помощь:Слежение за страницами\r\nСостояние объединения учётных записей (MergeAccount)\r\nДругие спецстраницы\r\nГаджеты (Gadgets)\r\nФильтр правок (AbuseFilter) и его срабатывания (AbuseLog)\r\nСледующих страниц нет в автоматическом списке, они уже присутствуют в нужных местах в интерфейсе сайта\r\n\r\nПереименовать (Movepage)\r\nО контрольной последовательности (Captcha)\r\nПодтверждение адреса электронной почты (Confirmemail)\r\nЗавершение сеанса (Userlogout)\r\nКроме того, в принципе специальными страницами также можно считать:\r\n\r\nСтраницы историй правок\r\nСтраницы сравнения версий\r\nСтраницы действий, доступных администраторам: удаления, изменения уровня защиты, блокировки и т. д.\r\nВ нашем разделе также есть спецстраницы «поддержки качества», связанные с процессом патрулирования.\r\n\r\nСтраницы с ограниченным доступом\r\nЭти страницы доступны только участникам с соответствующими флагами. Некоторые из них обычно используются прямо из интерфейса.\r\n\r\nЗаблокировать участника (Blockip)\r\nПросмотреть удалённые страницы (Undelete)\r\nУдалённый вклад участника (DeletedContributions)\r\nСтраницы, за которыми никто не следит (Unwatchedpages)\r\nИмпорт страниц (Import)\r\nПрава участника (Userrights)\r\nПроверить участника (Checkuser)\r\nСсылки на спецстраницы\r\nНа спецстраницы можно ссылаться из обычных страниц с помощью внутренних ссылок. В качестве префикса можно использовать как «Служебная», так и «Special». Иногда после знака / можно добавить параметр, в остальных случаях для указания параметров приходится пользоваться полной ссылкой (URL).\r\n\r\nAllpages и Prefixindex позволяют указать пространство и (частичное) имя страницы, например:\r\nSpecial:Allpages/Шаблон:Тр — все шаблоны, начинающиеся на «Тр» и дальше\r\nSpecial:Prefixindex/Участник:Js/ — все подстраницы участника Js; это наиболее распространённое использование «указателя по началу слов».\r\nКроме того, эти две спецстраницы можно «включать» прямо в викикод как шаблон, чтобы их результат становился частью отображаемой страницы, например {{Special:Prefixindex/Участник:Js/}}.\r\nRecentchanges, Newpages и Newfiles тоже можно включать как шаблон:\r\n{{Special:Newpages/shownav}} — показать с заголовком\r\n{{Special:Newpages/10}} — показать только 10 элементов\r\n{{Special:Newpages/limit=10,offset=10,shownav}} — начать с 10-го элемента, плюс остальные параметры\r\nRandom и Randomredirect позволяют указать нужное пространство имён:", "post_status": "Apr", "status_update": "2021-02-26T17:23:46.715Z", "date_create": "2021-02-15T15:11:58.988Z", "date_update": "2021-02-15T15:24:28.352Z"}}, {"model": "mainapp.post", "pk": 42, "fields": {"category_id": 2, "user_id": 24, "title": "как купить кота", "slug": "ikak-kupit-kota", "text": "Принимая решение о том, чтобы завести кота, подумайте о том, что Вы принимаете решение на ближайшие 15-20 лет. Решение это ответственное и требует ответственного подхода. Подумайте, почитайте, посоветуйтесь. Если у Вас нет денег на породистого кота, быть может стоить накопить, или обсудить с заводчиком вариант совладения? Ведь речь идет, в том числе, и о здоровье и благополучии Вашей семьи. Если у Вас есть лишь 200-800 грн на «нечто похожее на породу», и Вы принципиально не хотите платить больше, подумайте: а стоит ли это того? Ведь речь идет о беспородном котенке, с отягощенной, в том числе и не умными вязками, и не известно каким содержанием, генетикой. Быть может стоит осчастливить кота с улицы, ведь они такие самобытные.", "post_status": "Apr", "status_update": "2021-02-26T17:23:36.997Z", "date_create": "2021-02-17T18:54:55.773Z", "date_update": "2021-02-17T18:54:55.773Z"}}, {"model": "mainapp.post", "pk": 43, "fields": {"category_id": 5, "user_id": 1, "title": "Рефакторинг пет проекта: докеризация, метрики, тесты", "slug": "refaktoring-pet-proekta-dokerizatsiia-metriki-testy", "text": "Всем привет, я php разработчик. Я хочу поделиться историей, как я рефакторил один из своих телеграм ботов, который из поделки на коленке стал сервисом с более чем 1000 пользователей в очень узкой и специфической аудитории.\r\n\r\nПредыстория\r\nПару лет назад я решил тряхнуть стариной и поиграть в LineAge II на одном из популярных пиратских серверов. В этой игре есть один игровой процесс, в котором требуется \"поговорить\" с ящиками после смерти 4 боссов. Ящик стоит после смерти 2 минуты. Сами боссы после смерти появляются спустя 24 +/- 6ч, то есть шанс появится есть как через 18ч, так и через 30ч. У меня на тот момент была фуллтайм работа, да и в целом не было времени ждать эти ящики. Но нескольким моим персонажам требовалось пройти этот квест, поэтому я решил \"автоматизировать\" этот процесс. На сайте сервера есть RSS фид в формет XML, где публикуются события с серверов, включая события смерти босса.\r\n\r\nЗадумка была следующей:\r\n\r\nполучить данные с RSS\r\n\r\nсравнить данные с локальной копией в базе данных\r\n\r\nесли есть разница данных - сообщить об этом в телеграм канал\r\n\r\nотдельно сообщать если босса не убили за первые 9ч сообщением \"осталось 3ч\", и \"осталось 1,5ч\". Допустим вечером пришло сообщение, что осталось 3ч, значит смерть босса будет до того, как я пойду спать.\r\n\r\nКод на php был написан быстро и в итоге у меня было 3 php файла. Один был с god object классом, а другие два запускали программу в двух режимах - парсер новых, или проверка есть ли боссы на максимальном \"респе\". Запускал я их крон командами. Это работало и решало мою проблему.\r\n\r\nДругие игроки замечали, что я появляюсь в игре сразу после смерти боссов, и через 10 дней у меня на канале было около 50 подписчиков. Так же попросили сделать такое же для второго сервера этого пиратского сервиса. Задачу я тоже решил копипастой. В итоге у меня уже 4 файла с почти одинаковым кодом, и файл с god object. Потом меня попросили сделать то же самое для третьего сервера этого пиратского сервиса. И это отлично работало полтора года.\r\n\r\nВ итоге у меня спустя полтора года:\r\n\r\nу меня 6 файлов, дублируют себя почти полностью (по 2 файла на сервер)\r\n\r\nодин god object на несколько сотен строк\r\n\r\nMySQL и Redis на сервере, где разместил код\r\n\r\ncron задачи, которые запускают файлы\r\n\r\n~1400 подписчиков на канале в телеграм\r\n\r\nЯ откладывал месяцами рефакторинг этого кода, как говорится \"работает - не трогай\". Но хотелось этот проект привести в порядок, чтобы проще было вносить изменения, легче запускать и переносить на другой сервер, мониторить работоспособность и тд. При этом сделать это за выходные, в свое личное время.\r\n\r\nОжидаемый результат после рефакторинга\r\nОтрефакторить код так, чтобы легче было вносить изменения. Важный момент - отрефакторить без изменения бизнес логики, по сути раскидать god object по файлам, сам код не править, иначе это затянет сроки. Следовать PSR-12.\r\n\r\nДокеризировать воркера для удобства переноса на другой сервер и прозрачность запуска и остановки\r\n\r\nЗапускать воркера через supervisor\r\n\r\nВнедрить процесс тестирования кода, настроить Codeception\r\n\r\nДокеризировать MySQL и Redis\r\n\r\nНастроить Github Actions для запуска тестов и проверки на code style\r\n\r\nПоднять Prometheus, Grafana для метрик и мониторинга работоспособности\r\n\r\nСделать докер контейнер, который будет отдавать метрики на страницу /metrics для Prometheus\r\n\r\nСделать докер образ для бота телеграм, который будет отдавать срез по всем статусам 4 боссов в данный момент командами боту в личку\r\n\r\nВажное замечание. Все эти шаги выполнялись не совсем в том порядке, как я их описываю в этом туториале. Сделал все требуемое за выходные плюс пара вечеров после работы. Так же в целях не было сделать проект \"идеальным\", не совершать \"революции\", а дать возможность проекту плавно эволюционировать. Большая часть пунктов из плана давала возможность развивать проект.\r\n\r\nШаг 1. Рефакторинг приложения\r\nОдним из требований было не потратить на это недели, поэтому основные классы я решил сделать наследниками Singleton\r\n\r\n<?php\r\n\r\ndeclare(strict_types=1);\r\n\r\nnamespace AsteriosBot\\Core\\Support;\r\n\r\nuse AsteriosBot\\Core\\Exception\\DeserializeException;\r\nuse AsteriosBot\\Core\\Exception\\SerializeException;\r\n\r\nclass Singleton\r\n{\r\n    protected static $instances = [];\r\n\r\n    /**\r\n     * Singleton constructor.\r\n     */\r\n    protected function __construct()\r\n    {\r\n        // do nothing\r\n    }\r\n\r\n    /**\r\n     * Disable clone object.\r\n     */\r\n    protected function __clone()\r\n    {\r\n        // do nothing\r\n    }\r\n\r\n    /**\r\n     * Disable serialize object.\r\n     *\r\n     * @throws SerializeException\r\n     */\r\n    public function __sleep()\r\n    {\r\n        throw new SerializeException(\"Cannot serialize singleton\");\r\n    }\r\n\r\n    /**\r\n     * Disable deserialize object.\r\n     *\r\n     * @throws DeserializeException\r\n     */\r\n    public function __wakeup()\r\n    {\r\n        throw new DeserializeException(\"Cannot deserialize singleton\");\r\n    }\r\n\r\n    /**\r\n     * @return static\r\n     */\r\n    public static function getInstance(): Singleton\r\n    {\r\n        $subclass = static::class;\r\n        if (!isset(self::$instances[$subclass])) {\r\n            self::$instances[$subclass] = new static();\r\n        }\r\n        return self::$instances[$subclass];\r\n    }\r\n}\r\nТаким образом вызов любого класса, который от него наследуются, можно делать методом getInstance()\r\n\r\nВот так, например, выглядел класс подключения к базе данных\r\n\r\n<?php\r\n\r\ndeclare(strict_types=1);\r\n\r\nnamespace AsteriosBot\\Core\\Connection;\r\n\r\nuse AsteriosBot\\Core\\App;\r\nuse AsteriosBot\\Core\\Support\\Config;\r\nuse AsteriosBot\\Core\\Support\\Singleton;\r\nuse FaaPz\\PDO\\Database as DB;\r\n\r\nclass Database extends Singleton\r\n{\r\n    /**\r\n     * @var DB\r\n     */\r\n    protected DB $connection;\r\n\r\n    /**\r\n     * @var Config\r\n     */\r\n    protected Config $config;\r\n\r\n    /**\r\n     * Database constructor.\r\n     */\r\n    protected function __construct()\r\n    {\r\n        $this->config = App::getInstance()->getConfig();\r\n        $dto = $this->config->getDatabaseDTO();\r\n        $this->connection = new DB($dto->getDsn(), $dto->getUser(), $dto->getPassword());\r\n    }\r\n\r\n    /**\r\n     * @return DB\r\n     */\r\n    public function getConnection(): DB\r\n    {\r\n        return $this->connection;\r\n    }\r\n}\r\nВ процессе рефакторинга я не менял саму бизнес логику, оставил все \"как было\". Цель было именно разнести по файлам для облегчения изменения правок, а так же для возможности потом покрыть тестами.\r\n\r\nШаг 2: Докеризация воркеров\r\nЗапуск всех контейнеров я сделал через docker-compose.yml\r\n\r\nКонфиг сервиса для воркеров выглядит так:\r\n\r\n  worker:\r\n    build:\r\n      context: .\r\n      dockerfile: docker/worker/Dockerfile\r\n    container_name: 'asterios-bot-worker'\r\n    restart: always\r\n    volumes:\r\n      - .:/app/\r\n    networks:\r\n      - tier\r\nА сам docker/worker/Dockerfile выглядит так:\r\n\r\nFROM php:7.4.3-alpine3.11\r\n\r\n# Copy the application code\r\nCOPY . /app\r\n\r\nRUN apk update && apk add --no-cache \\\r\n    build-base shadow vim curl supervisor \\\r\n    php7 \\\r\n    php7-fpm \\\r\n    php7-common \\\r\n    php7-pdo \\\r\n    php7-pdo_mysql \\\r\n    php7-mysqli \\\r\n    php7-mcrypt \\\r\n    php7-mbstring \\\r\n    php7-xml \\\r\n    php7-simplexml \\\r\n    php7-openssl \\\r\n    php7-json \\\r\n    php7-phar \\\r\n    php7-zip \\\r\n    php7-gd \\\r\n    php7-dom \\\r\n    php7-session \\\r\n    php7-zlib \\\r\n    php7-redis \\\r\n    php7-session\r\n\r\n\r\n# Add and Enable PHP-PDO Extenstions\r\nRUN docker-php-ext-install pdo pdo_mysql\r\nRUN docker-php-ext-enable pdo_mysql\r\n\r\n# Redis\r\nRUN apk add --no-cache pcre-dev $PHPIZE_DEPS \\\r\n        && pecl install redis \\\r\n        && docker-php-ext-enable redis.so\r\n\r\n# Install PHP Composer\r\nRUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer\r\n\r\n# Remove Cache\r\nRUN rm -rf /var/cache/apk/*\r\n\r\n# setup supervisor\r\nADD docker/supervisor/asterios.conf /etc/supervisor/conf.d/asterios.conf\r\nADD docker/supervisor/supervisord.conf /etc/supervisord.conf\r\n\r\nVOLUME [\"/app\"]\r\n\r\nWORKDIR /app\r\n\r\nRUN composer install\r\n\r\nCMD [\"/usr/bin/supervisord\", \"-c\", \"/etc/supervisord.conf\"]\r\nОбратите внимание на последнюю строку в Dockerfile, там я запускаю supervisord, который будет мониторить работу воркеров.\r\n\r\nШаг 3: Настройка supervisor\r\nВажный дисклеймер по supervisor. Он предназначен для работы с процессами, которые работают долго, и в случае его \"падения\" - перезапустить. Мои же php скрипты работали быстро и сразу завершались. supervisor пробовал их перезапустить, и в конце концов переставал пытаться поднять снова. Поэтому я решил сам код воркера запускать на 1 минуту, чтобы это работало с supervisor.\r\n\r\nКод файла worker.php\r\n\r\n<?php\r\n\r\nrequire __DIR__ . '/vendor/autoload.php';\r\n\r\nuse AsteriosBot\\Channel\\Checker;\r\nuse AsteriosBot\\Channel\\Parser;\r\nuse AsteriosBot\\Core\\App;\r\nuse AsteriosBot\\Core\\Connection\\Log;\r\n\r\n$app = App::getInstance();\r\n$checker = new Checker();\r\n$parser = new Parser();\r\n$servers = $app->getConfig()->getEnableServers();\r\n$logger = Log::getInstance()->getLogger();\r\n$expectedTime = time() + 60; // +1 min in seconds\r\n$oneSecond = time();\r\nwhile (true) {\r\n    $now = time();\r\n    if ($now >= $oneSecond) {\r\n        $oneSecond = $now + 1;\r\n        try {\r\n            foreach ($servers as $server) {\r\n                $parser->execute($server);\r\n                $checker->execute($server);\r\n            }\r\n        } catch (\\Throwable $e) {\r\n            $logger->error($e->getMessage(), $e->getTrace());\r\n        }\r\n    }\r\n    if ($expectedTime < $now) {\r\n        die(0);\r\n    }\r\n}\r\nУ RSS есть защита от спама, поэтому пришлось сделать проверку на секунды и посылать не более 1го запроса в секунду. Таким образом мой воркер каждую секунду выполняет 2 действия, сначала проверяет rss, а затем калькулирует время боссов для сообщений о старте или окончании времени респауна боссов. После 1 минуты работы воркер умирает, и его перезапускает supervisor\r\n\r\nСам конфиг supervisor выглядит так:\r\n\r\n[program:worker]\r\ncommand = php /app/worker.php\r\nstderr_logfile=/app/logs/supervisor/worker.log\r\nnumprocs = 1\r\nuser = root\r\nstartsecs = 3\r\nstartretries = 10\r\nexitcodes = 0,2\r\nstopsignal = SIGINT\r\nreloadsignal = SIGHUP\r\nstopwaitsecs = 10\r\nautostart = true\r\nautorestart = true\r\nstdout_logfile = /dev/stdout\r\nstdout_logfile_maxbytes = 0\r\nredirect_stderr = true\r\nПосле старта контейнеров супервизор стартует воркера автоматически. Важный момент - в файле основного конфига /etc/supervisord.confобязательно нужно указать демонизация процесса, а так же подключение своих конфигов\r\n\r\n[supervisord]\r\nnodaemon=true\r\n\r\n[include]\r\nfiles = /etc/supervisor/conf.d/*.conf\r\nНабор полезных команд supervisorctl:\r\n\r\nsupervisorctl status       # статус воркеров\r\nsupervisorctl stop all     # остановить все воркера\r\nsupervisorctl start all    # запустить все воркера\r\nsupervisorctl start worker # запустить один воркера с конфига, блок [program:worker]\r\nШаг 4: Настройка Codeception\r\nЯ планирую в свободное время по чуть-чуть покрывать unit тестами уже существующий код, а со временем сделать еще и интеграционные. Пока что настроил только юнит тестирование и написал пару тестов на особо важную бизнес логику. Настройка была тривиальной, все завелось с коробки, только добавил в конфиг поддержку базы данны\r\n\r\n# Codeception Test Suite Configuration\r\n#\r\n# Suite for unit or integration tests.\r\n\r\nactor: UnitTester\r\nmodules:\r\n    enabled:\r\n        - Asserts\r\n        - \\Helper\\Unit\r\n        - Db:\r\n              dsn: 'mysql:host=mysql;port=3306;dbname=test_db;'\r\n              user: 'root'\r\n              password: 'password'\r\n              dump: 'tests/_data/dump.sql'\r\n              populate: true\r\n              cleanup: true\r\n              reconnect: true\r\n              waitlock: 10\r\n              initial_queries:\r\n                - 'CREATE DATABASE IF NOT EXISTS test_db;'\r\n                - 'USE test_db;'\r\n                - 'SET NAMES utf8;'\r\n    step_decorators: ~\r\nШаг 5: Докеризация MySQL и Redis\r\nНа сервере, где работало это приложение, у меня было еще пара других ботов. Все они использовали один сервер MySQL и один Redis для кеша. Я решил вынести все, что связано с окружением в отдельный docker-compose.yml, а самих ботов залинковать через внешний docker network\r\n\r\nВыглядит это так:\r\n\r\nversion: '3'\r\n\r\nservices:\r\n  mysql:\r\n    image: mysql:5.7.22\r\n    container_name: 'telegram-bots-mysql'\r\n    restart: always\r\n    ports:\r\n      - \"3306:3306\"\r\n    environment:\r\n      MYSQL_ROOT_PASSWORD: \"${DB_PASSWORD}\"\r\n      MYSQL_ROOT_HOST: '%'\r\n    volumes:\r\n      - ./docker/sql/dump.sql:/docker-entrypoint-initdb.d/dump.sql\r\n    networks:\r\n      - tier\r\n\r\n  redis:\r\n    container_name: 'telegram-bots-redis'\r\n    image: redis:3.2\r\n    restart: always\r\n    ports:\r\n      - \"127.0.0.1:6379:6379/tcp\"\r\n    networks:\r\n      - tier\r\n\r\n  pma:\r\n    image: phpmyadmin/phpmyadmin\r\n    container_name: 'telegram-bots-pma'\r\n    environment:\r\n      PMA_HOST: mysql\r\n      PMA_PORT: 3306\r\n      MYSQL_ROOT_PASSWORD: \"${DB_PASSWORD}\"\r\n    ports:\r\n      - '8006:80'\r\n    networks:\r\n      - tier\r\n\r\nnetworks:\r\n  tier:\r\n    external:\r\n      name: telegram-bots-network\r\nDB_PASSWORD я храню в .env файле, а ./docker/sql/dump.sql у меня лежит бекап для инициализации базы данных. Так же я добавил external network так же, как в этом конфиге - в каждом docker-compose.yml каждого бота на сервере. Таким образом они все находятся в одной сети и могут использовать общие базу данных и редис.\r\n\r\nШаг 6: Настройка Github Actions\r\nВ шаге 4 этого туториала я добавил тестовый фреймфорк Codeception, который для тестирования требует базу данных. В самом проекте нет базы, в шаге 5 я ее вынес отдельно и залинковал через external docker network. Для запуска тестов в Github Actions я решил полностью собрать все необходимое на лету так же через docker-compose.\r\n\r\nname: Actions\r\n\r\non:\r\n  pull_request:\r\n    branches: [master]\r\n  push:\r\n    branches: [master]\r\n\r\njobs:\r\n  build:\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n      - name: Checkout\r\n        uses: actions/checkout@v2\r\n\r\n      - name: Get Composer Cache Directory\r\n        id: composer-cache\r\n        run: |\r\n          echo \"::set-output name=dir::$(composer config cache-files-dir)\"\r\n      - uses: actions/cache@v1\r\n        with:\r\n          path: ${{ steps.composer-cache.outputs.dir }}\r\n          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}\r\n          restore-keys: |\r\n            ${{ runner.os }}-composer-\r\n      - name: Composer validate\r\n        run: composer validate\r\n      - name: Composer Install\r\n        run: composer install --dev --no-interaction --no-ansi --prefer-dist --no-suggest --ignore-platform-reqs\r\n      - name: PHPCS check\r\n        run: php vendor/bin/phpcs --standard=psr12 app/ -n\r\n      - name: Create env file\r\n        run: |\r\n          cp .env.github.actions .env\r\n      - name: Build the docker-compose stack\r\n        run: docker-compose -f docker-compose.github.actions.yml -p asterios-tests up -d\r\n      - name: Sleep\r\n        uses: jakejarvis/wait-action@master\r\n        with:\r\n          time: '30s'\r\n      - name: Run test suite\r\n        run: docker-compose -f docker-compose.github.actions.yml -p asterios-tests exec -T php vendor/bin/codecept run unit\r\nИнструкция onуправляет когда билд триггернётся. В моем случае - при создании пулл реквеста или при коммите в мастер.\r\n\r\nИнструкция uses: actions/checkout@v2 запускает проверку доступа процесса к репозиторию.\r\n\r\nДалее идет проверка кеша композера, и установка пакетов, если в кеше не найдено\r\n\r\nЗатем в строке run: php vendor/bin/phpcs --standard=psr12 app/ -nя запускаю проверку кода соответствию стандарту PSR-12 в папке ./app\r\n\r\nТак как тут у меня специфическое окружение, я подготовил файл .env.github.actionsкоторый копируется в .env Cодержимое .env.github.actions\r\n\r\nSERVICE_ROLE=test\r\nTG_API=XXXXX\r\nTG_ADMIN_ID=123\r\nTG_NAME=AsteriosRBbot\r\nDB_HOST=mysql\r\nDB_NAME=root\r\nDB_PORT=3306\r\nDB_CHARSET=utf8\r\nDB_USERNAME=root\r\nDB_PASSWORD=password\r\nLOG_PATH=./logs/\r\nDB_NAME_TEST=test_db\r\nREDIS_HOST=redis\r\nREDIS_PORT=6379\r\nREDIS_DB=0\r\nSILENT_MODE=true\r\nFILLER_MODE=true\r\nИз важного тут только настройки базы данных, которые не должны отличаться от настроек базы в этом окружении.\r\n\r\nЗатем я собираю проект при помощи docker-compose.github.actions.ymlв котором прописано все необходимое для тестирвания, контейнер с проектом и база данных. Содержимое docker-compose.github.actions.yml:\r\n\r\nversion: '3'\r\n\r\nservices:\r\n\r\n  php:\r\n    build:\r\n      context: .\r\n      dockerfile: docker/php/Dockerfile\r\n    container_name: 'asterios-tests-php'\r\n    volumes:\r\n      - .:/app/\r\n    networks:\r\n      - asterios-tests-network\r\n\r\n  mysql:\r\n    image: mysql:5.7.22\r\n    container_name: 'asterios-tests-mysql'\r\n    restart: always\r\n    ports:\r\n      - \"3306:3306\"\r\n    environment:\r\n      MYSQL_DATABASE: asterios\r\n      MYSQL_ROOT_PASSWORD: password\r\n    volumes:\r\n      - ./tests/_data/dump.sql:/docker-entrypoint-initdb.d/dump.sql\r\n    networks:\r\n      - asterios-tests-network\r\n#\r\n#  redis:\r\n#    container_name: 'asterios-tests-redis'\r\n#    image: redis:3.2\r\n#    ports:\r\n#      - \"127.0.0.1:6379:6379/tcp\"\r\n#    networks:\r\n#      - asterios-tests-network\r\n\r\nnetworks:\r\n  asterios-tests-network:\r\n    driver: bridge\r\nЯ закомментировал контейнер с Redis, но оставил возможность использовать его в будущем. Сборка с кастомным docker-compose файлом, а затем тесты - запускается так\r\n\r\ndocker-compose -f docker-compose.github.actions.yml -p asterios-tests up -d\r\ndocker-compose -f docker-compose.github.actions.yml -p asterios-tests exec -T php vendor/bin/codecept run unit\r\nВнимательный читатель обратит внимание на пункт между стартом контейнеров и запуском тестов. Это задержка в 30 секунд для того, чтобы база данных успела заполниться тестовыми данными.\r\n\r\nШаг 7: Настройка Prometheus и Grafana\r\nВ шаге 5 я вынес MySQL и Redis в отдельный docker-compose.yml. Так как Prometheus и Grafana тоже общие для всех моих телеграм ботов, я их добавил туда же. Сам конфиг этих контейнеров выглядит так:\r\n\r\n  prometheus:\r\n    image: prom/prometheus:v2.0.0\r\n    command:\r\n      - '--config.file=/etc/prometheus/prometheus.yml'\r\n    restart: always\r\n    ports:\r\n      - 9090:9090\r\n    volumes:\r\n      - ./prometheus.yml:/etc/prometheus/prometheus.yml\r\n    networks:\r\n      - tier\r\n\r\n  grafana:\r\n    container_name: 'telegram-bots-grafana'\r\n    image: grafana/grafana:7.1.1\r\n    ports:\r\n      - 3000:3000\r\n    environment:\r\n      - GF_RENDERING_SERVER_URL=http://renderer:8081/render\r\n      - GF_RENDERING_CALLBACK_URL=http://grafana:3000/\r\n      - GF_LOG_FILTERS=rendering:debug\r\n    volumes:\r\n      - ./grafana.ini:/etc/grafana/grafana.ini\r\n      - grafanadata:/var/lib/grafana\r\n    networks:\r\n      - tier\r\n    restart: always\r\n  renderer:\r\n    image: grafana/grafana-image-renderer:latest\r\n    container_name: 'telegram-bots-grafana-renderer'\r\n    restart: always\r\n    ports:\r\n      - 8081\r\n    networks:\r\n      - tier\r\nОни так же залинкованы одной сетью, которая потом линкуется с external docker network.\r\n\r\nPrometheus: я прокидываю свой конфиг prometheus.yml, где я могу указать источники для парсинга метрик\r\n\r\nGrafana: я создаю volume, где будут храниться конфиги и установленные плагины. Так же я прокидываю ссылку на сервис рендеринга графиков, который мне понадобиться для отправки alert. С этим плагином alert приходит со скриншотом графика.\r\n\r\nПоднимаю проект и устанавливаю плагин, затем перезапускаю Grafana контейнер\r\n\r\ndocker-compose up -d\r\ndocker-compose exec grafana grafana-cli plugins install grafana-image-renderer\r\ndocker-compose stop  grafana \r\ndocker-compose up -d grafana\r\nШаг 8: Публикация метрик приложения\r\nДля сбора и публикации метрик я использовал endclothing/prometheus_client_php\r\n\r\nТак выглядит мой класс для метрик\r\n\r\n<?php\r\n\r\ndeclare(strict_types=1);\r\n\r\nnamespace AsteriosBot\\Core\\Connection;\r\n\r\nuse AsteriosBot\\Core\\App;\r\nuse AsteriosBot\\Core\\Support\\Singleton;\r\nuse Prometheus\\CollectorRegistry;\r\nuse Prometheus\\Exception\\MetricsRegistrationException;\r\nuse Prometheus\\Storage\\Redis;\r\n\r\nclass Metrics extends Singleton\r\n{\r\n    private const METRIC_HEALTH_CHECK_PREFIX = 'healthcheck_';\r\n    /**\r\n     * @var CollectorRegistry\r\n     */\r\n    private $registry;\r\n\r\n    protected function __construct()\r\n    {\r\n        $dto = App::getInstance()->getConfig()->getRedisDTO();\r\n        Redis::setDefaultOptions(\r\n            [\r\n                'host' => $dto->getHost(),\r\n                'port' => $dto->getPort(),\r\n                'database' => $dto->getDatabase(),\r\n                'password' => null,\r\n                'timeout' => 0.1, // in seconds\r\n                'read_timeout' => '10', // in seconds\r\n                'persistent_connections' => false\r\n            ]\r\n        );\r\n        $this->registry = CollectorRegistry::getDefault();\r\n    }\r\n\r\n    /**\r\n     * @return CollectorRegistry\r\n     */\r\n    public function getRegistry(): CollectorRegistry\r\n    {\r\n        return $this->registry;\r\n    }\r\n\r\n    /**\r\n     * @param string $metricName\r\n     *\r\n     * @throws MetricsRegistrationException\r\n     */\r\n    public function increaseMetric(string $metricName): void\r\n    {\r\n        $counter = $this->registry->getOrRegisterCounter('asterios_bot', $metricName, 'it increases');\r\n        $counter->incBy(1, []);\r\n    }\r\n\r\n    /**\r\n     * @param string $serverName\r\n     *\r\n     * @throws MetricsRegistrationException\r\n     */\r\n    public function increaseHealthCheck(string $serverName): void\r\n    {\r\n        $prefix = App::getInstance()->getConfig()->isTestServer() ? 'test_' : '';\r\n        $this->increaseMetric($prefix . self::METRIC_HEALTH_CHECK_PREFIX . $serverName);\r\n    }\r\n}\r\nДля проверки работоспособности парсера мне нужно сохранить метрику в Redis после получения данных с RSS. Если данные получены, значит все нормально, и можно сохранить метрику\r\n\r\n        if ($counter) {\r\n            $this->metrics->increaseHealthCheck($serverName);\r\n        }\r\nГде переменная $counter это количество записей в RSS. Там будет 0, если получить данные не удалось, и значит метрика не будет сохранена. Это потом понадобится для alert по работе сервиса.\r\n\r\nЗатем нужно метрики опубликовать на странице /metric чтобы Prometheus их спарсил. Добавим хост в конфиг prometheus.yml из шага 7.\r\n\r\n# my global config\r\nglobal:\r\n  scrape_interval:     5s # Set the scrape interval to every 15 seconds. Default is every 1 minute.\r\n  evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.\r\n  # scrape_timeout is set to the global default (10s).\r\n\r\nscrape_configs:\r\n  - job_name: 'bots-env'\r\n    static_configs:\r\n      - targets:\r\n          - prometheus:9090\r\n          - pushgateway:9091\r\n          - grafana:3000\r\n          - metrics:80 # тут будут мои метрики по uri /metrics\r\nКод, который вытащит метрики из Redis и создаст страницу в текстовом формате. Эту страничку будет парсить Prometheus\r\n\r\n$metrics = Metrics::getInstance();\r\n$renderer = new RenderTextFormat();\r\n$result = $renderer->render($metrics->getRegistry()->getMetricFamilySamples());\r\nheader('Content-type: ' . RenderTextFormat::MIME_TYPE);\r\necho $result;\r\nТеперь настроим сам дашборд и alert. В настройках Grafana сначала укажите свой Prometheus как основной источник данных, а так же я добавил основной канал нотификации Телеграм (там добавляете токен своего бота и свой chat_id с этим ботом)\r\n\r\nНастройка Grafana\r\nНастройка Grafana\r\nМетрика increase(asterios_bot_healthcheck_x3[1m]) Показывает на сколько метрика asterios_bot_healthcheck_x3 увеличилась за 1 минуту\r\n\r\nНазвание метрики (будет под графиком)\r\n\r\nНазвание для легенды в пункте 4.\r\n\r\nЛегенда справа из пункта 3.\r\n\r\n\r\nПравило, по которому проверяется метрика. В моем случае проверяет что за последние 30 секунд проблем не было\r\n\r\nПравило, по которому будет срабатывать alert. В моем случае \"Когда сумма из метрики А между сейчас и 10 секунд назад\"\r\n\r\nЕсли нет данных вообще - слать alert\r\n\r\nСообщение в alert\r\n\r\nВыглядит alert в телеграм так (помните мы настраивали рендеринг картинок для alert?)\r\n\r\nAlert в Телеграм\r\nAlert в Телеграм\r\nОбратите внимание, alert заметил падение, но все восстановилось. Grafana приготовилась слать alert, но передумала. Это то самое правило 30 секунд\r\n\r\nТут уже все упало больше чем на 30 секунд и alert был отправлен\r\n\r\nСообщение, которое мы указали в настройках alert\r\n\r\nСсылка на dashboard\r\n\r\nИсточник метрики\r\n\r\nШаг 9: Телеграм бот\r\nНастройка телеграм бота ничем не отличается от настройки воркера. Телеграм бот по сути у меня это еще один воркер, я запустил его при помощи добавления настроек в supervisor. Тут уже рефакторинг проекта дал свои плоды, запуск бота был быстрым и простым.\r\n\r\nИтоги\r\nЯ жалею, что не сделал этого раньше. Я останавливал бота на период переустановки с новыми конфигами, и пользователи сразу стали просить пару новых фичей, которые добавить стали легче и быстрее. Надеюсь эта публикация вдохновит отрефакторить свой пет-проект и привести его в порядок. Не переписать, а именно отрефакторить.", "post_status": "Drf", "status_update": "2021-02-18T11:59:38.079Z", "date_create": "2021-02-18T11:59:38.079Z", "date_update": "2021-02-18T11:59:38.079Z"}}, {"model": "mainapp.post", "pk": 44, "fields": {"category_id": 4, "user_id": 25, "title": "Я вас любил..", "slug": "ia-vas-liubil", "text": "Я вас любил: любовь еще, быть может,\r\nВ душе моей угасла не совсем;\r\nНо пусть она вас больше не тревожит;\r\nЯ не хочу печалить вас ничем.\r\nЯ вас любил безмолвно, безнадежно,\r\nТо робостью, то ревностью томим;\r\nЯ вас любил так искренно, так нежно,\r\nКак дай вам бог любимой быть другим.", "post_status": "Apr", "status_update": "2021-02-26T17:23:30.107Z", "date_create": "2021-02-20T03:19:56.650Z", "date_update": "2021-02-20T03:19:56.650Z"}}, {"model": "mainapp.post", "pk": 45, "fields": {"category_id": 5, "user_id": 1, "title": "ВСЕ АНОНСЫ С ЦЕРЕМОНИИ ОТКРЫТИЯ BLIZZCONLINE", "slug": "vse-anonsy-s-tseremonii-otkrytiia-blizzconline", "text": "Blizzard запустила BlizzConline — онлайн-фестиваль, который заменяет отменённый BlizzCon 2020. В расписании есть целых два дня стримов, посвящённых разным играм компании, но самое важное рассказывают на церемонии открытия.\r\n\r\nВот весь список ключевых анонсов и показов:\r\n\r\nПремьера Diablo II Resurrected — переиздания классики в современной обёртке.\r\nТрейлер разбойницы — ещё одного класса Diablo IV.\r\nWorld of Warcraft Classic переходит в эпоху The Burning Crusade.\r\nWorld of Warcraft: Shadowlands готовится к крупному контентному апдейту.\r\nВ Hearthstone наступает следующий год развития с крупными изменениями.\r\nКлассика из 90-х возрождается в виде Blizzard Arcade Collection.\r\nОхапка свежих подробностей об Overwatch 2", "post_status": "Apr", "status_update": "2021-02-26T18:23:25.801Z", "date_create": "2021-02-20T04:58:28.712Z", "date_update": "2021-02-20T04:58:28.712Z"}}, {"model": "mainapp.post", "pk": 46, "fields": {"category_id": 2, "user_id": 2, "title": "«Настойчивость» на Марсе: где марсоход находится сейчас", "slug": "nastoichivost-na-marse-gde-marsokhod-nakhoditsia-seichas", "text": "Представители НАСА и JPL сразу после успешного прибытия ровера на Марс дали пресс-конференцию, а потом поделились информацией дополнительно — о дальнейшей судьбе марсохода. «Семь минут ужаса» никого не испугали (хотя и заставили поволноваться), но теперь начинается самое интересное — исследование Красной планеты.\r\n\r\nГде находится марсоход, мы знаем, но хочется посмотреть на то, что его окружает своими глазами. И вскоре такая возможность представится. Плюс еще много всего интересного.ыв", "post_status": "Apr", "status_update": "2021-02-25T14:59:52.421Z", "date_create": "2021-02-20T10:42:14.290Z", "date_update": "2021-02-25T14:42:30.581Z"}}, {"model": "mainapp.post", "pk": 47, "fields": {"category_id": 1, "user_id": 24, "title": "как купить собаку", "slug": "kak-kupit-sobaku", "text": "Покупка щенка — это захватывающий момент, но с этической и практической точки зрения очень важно ответственно отнестись к предварительному изучению соответствующей информации, чтобы убедиться, что вы приобретаете здоровую собаку.\r\nЕсли вы решили завести щенка, вы можете купить его у заводчика, взять из приюта или у знакомых. Покупка щенка — это захватывающий момент, но с этической и практической точки зрения очень важно ответственно отнестись к нему. Предварительно изучите доступную информацию о выбранной породе, чтобы убедиться, что характер животного соответствует вашему образу жизни, поговорите с заводчиком, обязательно убедитесь, что вы приобретаете здоровую собаку.", "post_status": "Apr", "status_update": "2021-02-21T21:31:01.715Z", "date_create": "2021-02-21T21:30:27.153Z", "date_update": "2021-02-21T21:30:27.153Z"}}, {"model": "mainapp.post", "pk": 49, "fields": {"category_id": 5, "user_id": 2, "title": "50 лет Паскаля", "slug": "50-let-paskalia", "text": "В начале 1960-х в мире доминировали языки Фортран (Джон Бэкус из IBM) для научного и Кобол (Жан Саммет из IBM и Министерство обороны) для коммерческого применения. Программы писались на бумаге, затем перфорировались на картах, после чего результатов их выполнения ждали целый день. Языки программирования считались важными помощниками и ускорителями процесса программирования.\r\n\r\nВ 1960 году международный комитет опубликовал спецификацию языка Алгол 601. Впервые язык определялся чётко сформулированными конструкциями и точным, формальным синтаксисом. Двумя годами позже стало понятно, что требуются некоторые исправления и усовершенствования. Однако основной задачей было расширение ассортимента приложений, поскольку Алгол 60 был предназначен только для научных вычислений (вычислительной математики). Для работы над этим проектом была собрана рабочая группа (Working Group, WG 2.1) под эгидой Международной федерации по обработке информации (IFIP).", "post_status": "Apr", "status_update": "2021-02-26T02:12:23.234Z", "date_create": "2021-02-25T14:38:04.122Z", "date_update": "2021-02-25T14:38:04.122Z"}}, {"model": "mainapp.post", "pk": 50, "fields": {"category_id": 5, "user_id": 2, "title": "Почему Windows", "slug": "pochemu-windows", "text": "«Что не так с компьютером — в нём установлен накопитель nvme, но открытие проводника, если этого давно не делали, занимает примерно 10 секунд, открытие файла .zip на рабочем столе занимает примерно минуту, а при нажатии клавиши „Пуск“ реакции нужно ждать примерно 20 секунд?»", "post_status": "Apr", "status_update": "2021-02-26T17:23:24.834Z", "date_create": "2021-02-26T12:28:26.684Z", "date_update": "2021-02-26T12:28:26.684Z"}}, {"model": "mainapp.post", "pk": 51, "fields": {"category_id": 4, "user_id": 14, "title": "У вопросу о бунтах в США", "slug": "u-voprosu-o-buntakh-v-ssha", "text": "В смутное время колебания или перехода всегда и везде появляются разные людишки. Я не про тех так называемых «передовых» говорю, которые всегда спешат прежде всех (главная забота) и хотя очень часто с глупейшею, но всё же с определенною более или менее целью. Нет, я говорю лишь про сволочь. Во всякое переходное время подымается эта сволочь, которая есть в каждом обществе, и уже не только безо всякой цели, но даже не имея и признака мысли, а лишь выражая собою изо всех сил беспокойство и нетерпение. Между тем эта сволочь, сама не зная того, почти всегда подпадает под команду той малой кучки «передовых», которые действуют с определенною целью, и та направляет весь этот сор куда ей угодно, если только сама не состоит из совершенных идиотов, что, впрочем, тоже случается.\r\nФ.М. Достоевский", "post_status": "Del", "status_update": "2021-02-27T09:17:36.452Z", "date_create": "2021-02-26T23:09:07.925Z", "date_update": "2021-02-26T23:09:07.925Z"}}, {"model": "mainapp.post", "pk": 52, "fields": {"category_id": 4, "user_id": 42, "title": "Общественный опрос: основные моменты", "slug": "obshchestvennyi-opros-osnovnye-momenty", "text": "Точечное воздействие существенно раскручивает стратегический рыночный план, оптимизируя бюджеты. Охват аудитории программирует институциональный диктат потребителя, признавая определенные рыночные тенденции. Общество потребления, как принято считать, пока плохо раскручивает стиль менеджмента, оптимизируя бюджеты. До недавнего времени считалось, что медийный канал индуктивно раскручивает типичный медийный канал. Управление брендом притягивает рейтинг. Можно предположить, что целевой сегмент рынка сбалансирован.\r\n\r\nАссортиментная политика предприятия, вопреки мнению П.Друкера, категорически оправдывает анализ рыночных цен. Пресс-клиппинг, согласно Ф.Котлеру, упорядочивает потребительский медиаплан. Российская специфика без оглядки на авторитеты усиливает социометрический SWOT-анализ, учитывая результат предыдущих медиа-кампаний. Наряду с этим, имидж предприятия категорически развивает мониторинг активности. Стратегический маркетинг, конечно, стремительно специфицирует ребрендинг. Восприятие марки однородно переворачивает институциональный рейтинг.\r\n\r\n\r\nКаждая сфера рынка традиционно искажает медиамикс. Как предсказывают футурологи системный анализ усиливает креативный метод изучения рынка. Согласно последним исследованиям, рекламное сообщество консолидирует из ряда вон выходящий стиль менеджмента. Согласно ставшей уже классической работе Филипа Котлера, оценка эффективности кампании определяет потребительский конкурент. Нишевый проект обуславливает системный анализ.", "post_status": "Del", "status_update": "2021-02-27T07:02:24.030Z", "date_create": "2021-02-27T07:02:19.538Z", "date_update": "2021-02-27T07:02:51.543Z"}}, {"model": "mainapp.post", "pk": 53, "fields": {"category_id": 5, "user_id": 20, "title": "qwdqwd", "slug": "qwdqwd", "text": "123123123", "post_status": "Apr", "status_update": "2021-02-27T09:20:53.923Z", "date_create": "2021-02-27T09:18:25.042Z", "date_update": "2021-02-27T09:18:25.042Z"}}